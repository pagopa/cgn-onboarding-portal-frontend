# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: environment
    displayName: Target Environment
    type: string
    default: uat
    values:
      - uat
      - prod

variables:
  ${{ if eq(parameters['environment'], 'uat') }}:
    azureSubscription: '$(UAT_AZURE_SUBSCRIPTION)'
    storage: '$(UAT_STORAGE_ACCOUNT_NAME)'
    containerName: '$(BLOB_CONTAINER_NAME)'
    endpoint: '$(UAT_ENDPOINT_AZURE)'
    profileName: '$(UAT_PROFILE_NAME_CDN_AZURE)'
    resourceGroup: '$(UAT_RESOURCE_GROUP_AZURE)'
  ${{ if eq(parameters['environment'], 'prod') }}:
    azureSubscription: '$(PROD_AZURE_SUBSCRIPTION)'
    storage: '$(PROD_STORAGE_ACCOUNT_NAME)'
    containerName: '$(BLOB_CONTAINER_NAME)'
    endpoint: '$(PROD_ENDPOINT_AZURE)'
    profileName: '$(PROD_PROFILE_NAME_CDN_AZURE)'
    resourceGroup: '$(PROD_RESOURCE_GROUP_AZURE)'

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v14
      endpoint: 'io-azure-devops-github-ro'

stages:
  # Create a release
  # Activated when ONE OF these are met:
  # - is on branch master
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      and(
      succeeded(),
      or(
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      and(
      startsWith(variables['Build.SourceBranch'], 'refs/tags'),
      endsWith(variables['Build.SourceBranch'], '-RELEASE')
      )
      )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
              - template: templates/node-github-release/template.yaml@pagopaCommons
                parameters:
                  semver: '${{ parameters.RELEASE_SEMVER }}'
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)

          - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
              - script: |
                  echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
                displayName: 'Skip release bundle'
  # Prepare Artifact with application bundle
  - stage: Prepare_artifact
    dependsOn:
      - Release
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: azure-templates/setup-project.yml
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/make-build.yml

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: Bundle

  # Deploy bundle to the staging container
  - stage: Deploy_staging
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureFileCopy@4
            inputs:
              sourcePath: '$(Pipeline.Workspace)/Bundle/*'
              azureSubscription: '$(azureSubscription)'
              destination: 'AzureBlob'
              storage: '$(storage)'
              containerName: '$(containerName)'
            displayName: Deploy to container blob

  # Check that the staging instance is healthy
  - stage: Healthcheck
    dependsOn:
      - Deploy_staging
    jobs:
      - job: 'do_healthcheck'
        steps:
          - template: templates/rest-healthcheck/template.yaml@pagopaCommons
            parameters:
              azureSubscription: '$(azureSubscription)'
              endpoint: 'https://$(endpoint).azureedge.net/$(MY_INDEX)'
              endpointType: 'public'
              appName: ''
              containerInstanceResourceGroup: ''
              containerInstanceVNet: ''
              containerInstanceSubnet: ''

  # Deploy bundle to the production container
  - stage: Deploy_production
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureFileCopy@4
            inputs:
              sourcePath: '$(Pipeline.Workspace)/Bundle/*'
              azureSubscription: '$(azureSubscription)'
              destination: 'AzureBlob'
              storage: '$(storage)'
              containerName: '$(containerName)'
            displayName: Deploy to container blob

          - task: AzureCLI@1
            displayName: 'Purge CDN'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g $(resourceGroup) -n $(endpoint) --profile-name $(profileName) --content-paths "/*"
