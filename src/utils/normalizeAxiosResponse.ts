import { AxiosError, AxiosResponse } from "axios";

/**
 * given a result of an ajax call, returns a promise that always resolves, see return type
 * this mimics Future<Either<Err, Res>> composition (like in functional languages) that is more practical and conserves error type
 * this helper function tries to simplify the usage of the methods generated by openapi-tools trying to strike a balance between type safety and ease of use
 * types generated are unfortunately not complete and wrong in some cases
 * @deprecated
 */
type StatusCodeOk = 200 | 201 | 204;
type StatusCodeKo = 400 | 403 | 404 | 409 | 404 | 500;
export async function normalizeAxiosResponse<Data>(
  axiosOutcome: Promise<AxiosResponse<Data, unknown>>
): Promise<
  | { status: StatusCodeOk; data: Data }
  | { status: StatusCodeKo; data: unknown }
  | (AxiosError & { status: undefined })
> {
  try {
    const outcome = await axiosOutcome;
    if (outcome instanceof AxiosError) {
      if (outcome.response) {
        return {
          status: outcome.response.status as StatusCodeKo,
          data: outcome.response.data
        };
      } else {
        return outcome as AxiosError & { status: any };
      }
    } else {
      return {
        status: outcome.status as StatusCodeOk,
        data: outcome.data
      };
    }
  } catch (error) {
    return error as AxiosError & { status: any };
  }
}
